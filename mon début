import numpy as np
import tkinter as tk
from PIL import Image,ImageTk


root=tk.Tk()


class labyrinthe(tk.Canvas):
    def __init__(self):
        super().__init__(width=550,height=610,background='black',highlightthickness=0)
        
        self.w=560
        self.h=620
#####https://itnext.io/how-to-create-pac-man-in-python-in-300-lines-of-code-or-less-part-1-288d54baf939
        
        self.ascii_maze=[                   
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                    "X            XX            X",
                    "X XXXX XXXXX XX XXXXX XXXX X",
                    "X XXXX XXXXX XX XXXXX XXXX X",
                    "X XXXX XXXXX XX XXXXX XXXX X",
                    "X                          X",
                    "X XXXX XX XXXXXXXX XX XXXX X",
                    "X XXXX XX XXXXXXXX XX XXXX X",
                    "X      XX    XX    XX      X",
                    "XXXXXX XXXXX XX XXXXX XXXXXX",
                    "XXXXXX XXXXX XX XXXXX XXXXXX",
                    "XXXXXX XX          XX XXXXXX",
                    "XXXXXX XX XXXXXXXX XX XXXXXX",
                    "XXXXXX XX XXXXXXXX XX XXXXXX",
                    "          XXXXXXXX          ",
                    "XXXXXX XX XXXXXXXX XX XXXXXX",
                    "XXXXXX XX XXXXXXXX XX XXXXXX",
                    "XXXXXX XX          XX XXXXXX",
                    "XXXXXX XX XXXXXXXX XX XXXXXX",
                    "XXXXXX XX XXXXXXXX XX XXXXXX",
                    "X            XX            X",
                    "X XXXX XXXXX XX XXXXX XXXX X",
                    "X XXXX XXXXX XX XXXXX XXXX X",
                    "X   XX                XX   X",
                    "XXX XX XX XXXXXXXX XX XX XXX",
                    "XXX XX XX XXXXXXXX XX XX XXX",
                    "X      XX    XX    XX      X",
                    "X XXXXXXXXXX XX XXXXXXXXXX X",
                    "X XXXXXXXXXX XX XXXXXXXXXX X",
                    "X                          X",
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                ]
        
        
        self.col=len(list(self.ascii_maze[0]))
        self.line=len(list(self.ascii_maze))
        self.matrix=np.zeros((self.line,self.col))
        for i in range(self.line):
            for j in range(self.col):
                if self.ascii_maze[i][j]==" ":
                    self.matrix[i][j]=1
                    
        self.list_of_coordinates=[(i,j) for i in range(0,self.w,20) for j in range(0,self.h,20)]
        self.load_assets()
        self.create_labyrinthe()
        self.create_adjacency()
        # print(self.adj)
    def load_assets(self):
        self.wall_image=Image.open("D://pg python//pygame trial//Tkinter//pacman//wall.png")
        self.wall_body=ImageTk.PhotoImage(self.wall_image)
        
        
    def create_labyrinthe(self):
        for i,j in self.list_of_coordinates:
            if j//20<31 and i//20 <28:
                if self.matrix[j//20,i//20]==0:
                    self.create_image(i,j,image=self.wall_body,tag='wall')
            # else:
            #     print(i//20,j//20)
            
     
    def create_adjacency(self):
        self.adj={}
        
        self.adj[(14,self.col-1)]=[(14,0),(14,26)] 
        self.adj[(14,0)]=[(14,self.col-1),(14,1)]
        
        for i in range(1,self.line):
            for j in range(1,self.col):
                if self.matrix[i][j]==1:
                    self.adj[(i,j)]=[]
                    if self.matrix[i-1][j]==1:
                        self.adj[(i,j)].append((i-1,j))
                        
                    if i+1<self.line:
                        if self.matrix[i+1][j]==1:
                            self.adj[(i,j)].append((i+1,j))
                        
                    if self.matrix[i][j-1]==1:
                        self.adj[(i,j)].append((i,j-1))
                        
                    if j+1<self.col:   
                        if self.matrix[i][j+1]==1:
                            self.adj[(i,j)].append((i,j+1))

    
    def BFS(self, depart, arrivee):
       a_explorer = [depart]
       deja_collectes = [depart]
       self.chemins = {depart: [depart]}

       while len(a_explorer) != 0:
           courant = a_explorer.pop(0)

           if courant == arrivee:
               return self.chemins[arrivee]

           if courant in self.adj:
               for sommet in self.adj[courant]:
                   if sommet not in deja_collectes:
                       a_explorer.append(sommet)
                       deja_collectes.append(sommet)
                       self.chemins[sommet] = self.chemins[courant] + [sommet]
       return None



    
root.title("pacman with Tkinter")
root.resizable(False,False) 
board=labyrinthe()
board.pack()

root.mainloop()
